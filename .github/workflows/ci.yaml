name: CI

on:
  push:
    branches: [master]
    tags:
      - '*.*.*'

permissions:
  contents: write
  actions: write

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure the full history is fetched
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: |
        python3 -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Get previous tag
        id: prev_tag
        run: |
          prev_tag=$(git describe --tags --abbrev=0 HEAD^ || echo "")
          echo "::set-output name=PREV_TAG::${prev_tag}"

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -z "${{ steps.prev_tag.outputs.PREV_TAG }}" ]; then
            echo "No previous tag found, only showing commits from the current tag."
            commits=$(git log ${GITHUB_REF} --oneline)
          else
            commits=$(git log ${{ steps.prev_tag.outputs.PREV_TAG }}..${GITHUB_REF} --oneline)
          fi
          echo "::set-output name=NOTES::${commits}"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            Release notes for ${{ steps.version.outputs.VERSION }}

            Commits:
            ${{ steps.release_notes.outputs.NOTES }}

  publish-to-pypi:
    name: Publish üêç üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install twine
      run: |
        python3 -m pip install twine --user
    - name: Download the distribution packages
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to PyPI
      run: |
        python3 -m twine upload dist/* --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}